DddCompact = function(domains, events) {    var application = {        namespaces: {},        domains: {},        eventBus: null,        loader: null,        id: 1    };    application.init = function(domains, events) {        application.eventBus = new application.EventBus({            makeItemMethod: application.makeItem,            events: events        });        application.loader = new application.Loader();                for (var domainName in domains) {            if (domains.hasOwnProperty(domainName)) {                                application.namespaces[domainName] = {};                application.loader.loadScript(                    domains[domainName], // url                    application.namespaces[domainName]                );                        }        }        return {            makeItem: application.makeItem        }    };    application.makeItem = function(domainName, itemClass, itemOptions) {            var domain = application.makeDomain(domainName);                var item = domain.makeItem(itemClass, itemOptions);            return item;    };        application.makeDomain = function(domainName) {            if (!application.namespaces[domainName]) {            throw new Error("No namespace has been defined for " + domainName + " domain");        }        if (!application.domains[domainName]) {            application.domains[domainName] = new application.Domain({                domainName: domainName,                namespace: application.namespaces[domainName],                eventBus: application.eventBus,                provideIdMethod: application.provideId            });        }                return application.domains[domainName];        };    application.provideId = function() {                return application.id++;            }        application.Domain = function(domainOptions) {        var domain = {            factory: null        };        domain.init = function(domainOptions) {                        domain.factory = new domain.Factory({                domainName: domainOptions.domainName,                namespace: domainOptions.namespace,                eventBus: domainOptions.eventBus,                provideIdMethod: domainOptions.provideIdMethod            });            return  {                makeItem: domain.makeItem            }                    };        domain.makeItem = function(className, itemOptions) {                    var compound = domain.factory.makeItem(className, itemOptions);                        return compound.item;                    }                domain.Factory = function(factoryOptions) {            var factory = {                domainName: null,                namespace: null,                eventBus: null,                cores: []            };                        factory.init = function(factoryOptions) {                                factory.domainName = factoryOptions.domainName;                factory.namespace = factoryOptions.namespace;                factory.eventBus = factoryOptions.eventBus;                factory.provideIdMethod = factoryOptions.provideIdMethod;                                return {                    makeItem: factory.makeItem,                    makeCollection: factory.makeCollection                };            };                        factory.provideIdMethod = function() {};                        factory.makeCore = function(itemClass, itemOptions) {                var core = new domain.Core({                    factory: factory,                    domainName: factory.domainName,                    itemClass: itemClass,                    id: factory.provideIdMethod(),                    itemOptions: itemOptions,                    fireEventMethod: factory.makeFiringMethod(itemClass),                    makeCollectionMethod: factory.makeCollection                });                                factory.cores.push(core);                                return core;                            };                        factory.makeItem = function(itemClass, itemOptions) {                if (typeof itemOptions == "undefined") {                    itemOptions = {};                }                            var core = factory.makeCore(itemClass, itemOptions);                var item = new factory.namespace[itemClass](core);                                core.finishDefinition(item);                return {                    item: item,                    core: core                };                            };                        factory.findCore = function(item) {                for (var i in factory.cores) {                                        if (factory.cores[i].hasItem(item)) {                        return factory.cores[i];                    }                                    }                                return null;                            };                        factory.makeCollection = function(itemClass) {                            var collection = new domain.Collection({                    eventBus: factory.eventBus,                    itemFactoryMethod: function(record) {                        return factory.makeItem(itemClass, record);                    },                    findCoreMethod: function(item) {                        return factory.findCore(item);                    },                    fireEventMethod: factory.makeFiringMethod(itemClass)                });                                return collection;                            };            factory.makeFiringMethod = function(itemClass) {                return function(eventName, eventData) {                    if (typeof eventData == 'undefined') {                        var eventData = {};                    }                    eventData.domainName = factory.domainName;                    eventData.itemClass = itemClass;                    return factory.eventBus.fireEvent(eventName, eventData);                };                            };                        return factory.init(factoryOptions);                    };        domain.Core = function(coreOptions) {            var core = {                itemOptions: null,                id: null,                domainName: null,                itemClass: null,                host: null,                idFieldName: null,                fieldNames: [],                requiredFieldNames: [],                item: null,                publicMembers: {}            };            core.init = function(coreOptions) {                core.itemOptions = coreOptions.itemOptions;                core.id = coreOptions.id;                core.makeCollectionMethod = coreOptions.makeCollectionMethod;                core.fireEventMethod = coreOptions.fireEventMethod;                core.domainName = coreOptions.domainName;                core.itemClass = coreOptions.itemClass;                core.publicMembers = {                    isIn: core.isIn,                    defineIdField: core.defineIdField,                    defineField: core.defineField,                    defineRequiredField: core.defineRequiredField,                    defineOption: core.defineOption,                    defineCollection: core.defineCollection,                    defineMessages: core.defineMessages,                    defineEvents: core.defineEvents,                    finishDefinition: core.finishDefinition                };                                return core.publicMembers;            };                        core.makeCollectionMethod = function() {};                        core.fireEventMethod = function() {};            core.isIn = function(host) {                core.host = host;                            };                        core.defineIdField = function(idFieldName) {                core.defineField(idFieldName);                core.idFieldName = idFieldName;            };            core.defineRequiredField = function(requiredFieldName) {                                core.defineField(requiredFieldName);                core.requiredFieldNames.push(requiredFieldName);                                if (typeof core.itemOptions[requiredFieldName] == 'undefined') {                    throw new Error(                        'When creating '                        + core.domainName                        + '.'                        + core.itemClass                        + ' objects you must provide a value for the "'                        + requiredFieldName                        + '" field.'                    );                }                            }                        core.defineField = function(fieldName, defaultValue) {                            if (typeof defaultValue == "undefined") {                    defaultValue = null;                }                                var fieldValue = defaultValue;                            if (core.fieldNames[fieldName]) {                    throw new Error(                        "Field "                         + core.domainName                        + "." + core.itemClass                         + "." + fieldName                         + " cannot be redefined."                    );                }                                core.fieldNames.push(fieldName);                if (typeof core.itemOptions[fieldName] !== 'undefined') {                    fieldValue = core.itemOptions[fieldName];                }                            core.addHostMember(fieldName, fieldValue);                            };            core.defineCollection = function(collectionName, collectionClass) {                            var collection = core.makeCollectionMethod(collectionClass);                core.addHostMember(collectionName, collection);                            };                        core.defineMessages = function() {                                var messageNames = arguments;                                for (var i in messageNames) {                    core.addHostMember(messageNames[i], function(data) {                                            });                }                            };                        core.defineEvents = function() {                                var eventNames = arguments;                                var factory = function(eventName) {                    return function (data) {                        return core.fireEventMethod(eventName, data);                    }                }                                for (var i in eventNames) {                    core.addHostMember(eventNames[i], factory(eventNames[i]));                }                            };                        core.finishDefinition = function(item) {                core.item = item;                            delete(core.publicMembers.isIn);                delete(core.publicMembers.defineIdField);                delete(core.publicMembers.defineRequiredField);                delete(core.publicMembers.defineField);                delete(core.publicMembers.defineCollection);                                core.publicMembers.hasItem = core.hasItem;                core.publicMembers.getRecord = core.getRecord;                core.publicMembers.getIdFieldName = core.getIdFieldName;                        };                        core.hasItem = function(item) {                return (item === core.item);                            }                        core.getRecord = function() {                                var record = {};                                for (var i in core.fieldNames) {                                        record[core.fieldNames[i]] = core.host[core.fieldNames[i]];                                    }                                return record;                            }                        core.getIdFieldName = function() {                return core.idFieldName;            }                        core.addHostMember = function(key, value) {                if (typeof core.host[key] !== "undefined") {                    throw new Error(                        "The internal member "                         + core.domainName                        + "." + core.itemClass                         + "." + key                         + " cannot be redefined."                    );                }                                core.host[key] = value;                            };                        return core.init(coreOptions);        };        domain.Collection = function(collectionOptions) {            var collection = {                eventBus: null            };            collection.init = function(collectionOptions) {                collection.eventBus = collectionOptions.eventBus;                collection.itemFactoryMethod = collectionOptions.itemFactoryMethod;                collection.fireEventMethod = collectionOptions.fireEventMethod;                collection.findCoreMethod = collectionOptions.findCoreMethod;                                return {                    createItem: collection.createItem,                    readAllItems: collection.readAllItems,                    readItemUsingId: collection.readItemUsingId,                    updateItem: collection.updateItem,                    deleteItem: collection.deleteItem                };            };                        collection.itemFactoryMethod = function() {};                        collection.findCoreMethod = function() {};                        collection.fireEventMethod = function() {};                        collection.createItem = function(requiredValues) {                                if (typeof requiredValues == "undefined") {                    var requiredValues = {};                }                                var compound = collection.itemFactoryMethod(requiredValues);                return compound.item;                            };            collection.readAllItems = function() {                var records = collection.fireEventMethod("readAllRecords", {}, []);                return collection.turnToItems(records);                            };                        collection.readItemUsingId = function(id) {            };            collection.updateItem = function(item) {                                var core = collection.findCoreMethod(item);                if (!core) {                    return;                }                                var idFieldName = core.getIdFieldName();                var record = core.getRecord();                                if (!record[idFieldName]) {                    collection.fireEventMethod("setRecordId", {                        idFieldName: idFieldName,                        record: record                    });                }                                collection.fireEventMethod("updateRecord", {                    idFieldName: idFieldName,                    record: record                });                            };            collection.deleteItem = function(item) {                var core = collection.findCoreMethod(item);                if (!core) {                    return;                }                                var idFieldName = core.getIdFieldName();                var record = core.getRecord();                                collection.fireEventMethod("deleteRecord", {                    idFieldName: idFieldName,                    idFieldValue: record[idFieldName]                });                                delete(item);                delete(core);            };                        collection.turnToItems = function(records) {                                var items = [];                                for (var i in records) {                    items.push(collection.turnToItem(records[i]));                }                                return items;                            };                        collection.turnToItem = function(record) {                var compound = collection.itemFactoryMethod(record);                                return compound.item;                            };                        return collection.init(collectionOptions);        };        return domain.init(domainOptions);    };    application.EventBus = function(eventBusOptions) {            var eventBus = {            singletons: {},            handlers: {},            events: null        };        eventBus.init = function(eventBusOptions) {                        eventBus.makeItemMethod = eventBusOptions.makeItemMethod;            eventBus.events = eventBusOptions.events ? eventBusOptions.events : {};                        return {                fireEvent: eventBus.fireEvent            };                    };                eventBus.makeItemMethod = function(){};                eventBus.fireEvent = function(eventName, eventData, defaultResult) {            console.log(                'Domain '                + eventData.domainName                 + '.'                + eventData.itemClass                + ' fired "'                 + eventName                + '" event with this data:'            );            console.log(eventData);            if (eventBus.events[eventName]) {                                return eventBus.events[eventName](                    eventData,                     {                        addHandler: eventBus.addHandler,                        handle: function(data) {                            eventBus.handle(eventName, data);                        },                        makeItem: eventBus.makeItem,                        makeSingleton: eventBus.makeSingleton                    }                );                            } else {                                return defaultResult;                            }                    };                eventBus.addHandler = function(eventName, handler) {                        if (typeof eventBus.handlers[eventName] == "undefined") {                eventBus.handlers[eventName] = [];            }                        eventBus.handlers[eventName].push(handler);                    };                eventBus.handle = function(eventName, data) {                        var results = [];                        for (var i = 0; i < eventBus.handlers[eventName].length; i++) {                results.push(                    eventBus.handlers[eventName][i](data)                );            }                        return results;                    };                eventBus.makeItem = function(domainName, itemClass) {                        return eventBus.makeItemMethod(domainName, itemClass);                    }                eventBus.makeSingleton = function(domainName, itemClass) {                        if (!eventBus.singletons[domainName]) {                eventBus.singletons[domainName] = {};            }                        if (!eventBus.singletons[domainName][itemClass]) {                eventBus.singletons[domainName][itemClass] = eventBus.makeItemMethod(domainName, itemClass);            }                        return eventBus.singletons[domainName][itemClass];                    }                return eventBus.init(eventBusOptions);            }     application.Loader = function(loaderOptions) {                var loader = {};        loader.init = function(loaderOptions) {            return {                loadScript: loader.loadScript            };                    };                loader.getHttpRequest = function() {                        var xmlHttpFactories = [                function () {return new XMLHttpRequest()},                function () {return new ActiveXObject("Msxml2.XMLHTTP")},                function () {return new ActiveXObject("Msxml3.XMLHTTP")},                function () {return new ActiveXObject("Microsoft.XMLHTTP")}            ];            var httpRequest = false;                        for (var i=0; i<xmlHttpFactories.length; i++) {                try {                    httpRequest = xmlHttpFactories[i]();                }                catch (e) {                    continue;                }                break;            }                        if (httpRequest === false) {                throw new Error('This browser does not support XMLHttpRequest.');            }                        return httpRequest;        }        loader.loadScript = function(url, namespace){            var httpRequest = loader.getHttpRequest();            httpRequest.onreadystatechange = function() {                if ( httpRequest.readyState == 4 ) {                                        if (                             httpRequest.status == 200                         ||  httpRequest.status == 304                     ) {                                                  loader.includeJavaScript(                             namespace,                             httpRequest.responseText                         );                                            } else {                                                console.log(                             'XML request error: '                             + httpRequest.statusText                             + ' (' + httpRequest.status + ')'                         ) ;                    }                                    }            }                        httpRequest.open('GET', url, false);            httpRequest.send(null);                    };                loader.includeJavaScript = function(namespace, source) {            if (  source != null  ){                                eval("(" + source + ")(namespace);");                console.log(namespace);            }        }                return loader.init(loaderOptions);            }        return application.init(domains, events);}